// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  email     String    @unique
  name      String
  image     String?
  role      String    @default("user")
  phone     String
  password  String
  accounts  Account[]
  products  Product[]
  sessions  Session[]
  cart      Carts[]
  orders    Order[]
  address   Address[]
  payment   Payment[]
}

model Account {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String    @db.ObjectId
  user              User      @relation(fields: [userId], references: [id])
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         DateTime?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  oauthTokenSecret  String?
  oauthToken        String?
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model Product {
//   id                 String   @id @default(auto()) @map("_id") @db.ObjectId
//   name               String
//   price              Int
//   discount_price     Int?
//   discount_pecent    Int?
//   brand              String?
//   slug               String?
//   category           String?
//   description        String
//   overview           String?
//   warranty           String?
//   shippingInfo       String?
//   image              Json?
//   colors             String?
//   size               String?
//   // size               String[]
//   // qty                Int      @default(1)
//   userId             String   @db.ObjectId
//   user               User     @relation(fields: [userId], references: [id])
//   instock            Boolean  @default(true)
//   available_Quantity Int?
//   createAt           DateTime @default(now())
//   review             Review[]
//   cart               Carts[]
// }
model Product {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String 
  sku             String?     @unique
  description     String?
  images          Image?
  categoryId      String?     @db.ObjectId
  category        Category?   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  quantity        Int?
  price           Float?
  lowStock        Float?
  discountPrice        Float?
  units            String?
  brand           String
  dimensions      String?
  weight          Float?
  taxRate         Float?
  shippingInfo    String?
  warranty        String?
  // location        String?
  review          Review[]
  cartItems       CartItems[]
  orderItems      OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  User            User?       @relation(fields: [userId], references: [id])
  userId          String?     @db.ObjectId

  @@index([categoryId, name, sku, price])
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  slug      String
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       Json?
  cloudPublicId String?
  // color     String
  productId String   @unique @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Stock {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   productId String   @unique @db.ObjectId
//   quantity  Int      @default(0)
//   updatedAt DateTime @updatedAt
//   product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
//   createdAt DateTime @default(now())
// }

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  userId    String?
  // user User @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int?
  comment   String?
  createAt  DateTime @default(now())
}

// model Order {
//   id              String    @id @default(auto()) @map("_id") @db.ObjectId
//   userId          String    @db.ObjectId
//   users           User      @relation(fields: [userId], references: [id])
//   total_qty       Int
//   total_price     Int
//   orderItem       Json
//   payment         Payment[]
//   paymentStatus   String    @default("pending")
//   paymentMethod   String
//   deliveryStatus  String?   @default("pending")
//   paymentIntentId String?   @unique
//   createAt        DateTime  @default(now())
// }

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  total      Float
  orderItems OrderItem[]
  userId     String?     @db.ObjectId
  status     String?     @default("pending")
  user       User?       @relation(fields: [userId], references: [id])
  payment    Payment[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int
  price     Float

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Carts {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  users     User        @relation(fields: [userId], references: [id])
  cartItems CartItems[]
}

model CartItems {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  productId  String  @db.ObjectId
  product    Product @relation(fields: [productId], references: [id])
  quantity   Int
  totalPrice Int
  cartId     String  @db.ObjectId
  cart       Carts   @relation(fields: [cartId], references: [id])
}

// model OrderItem {
//   id          String  @id @default(cuid())
//   orderId     String
//   order       Order   @relation(fields: [orderId], references: [id])
//   productId   String
//   product     Product @relation(fields: [productId], references: [id])
//   total_qty   Int
//   total_price Int
// warning: in the working copy of 'components.json', LF will be replaced by CRLF the next time Git touches it
// warning: in the working copy of 'eslint.config.mjs', LF will be replaced by CRLF the next time Git touches it
// warning: in the working copy of 'jsconfig.json', LF will be replaced by CRLF the next time Git touches it
// warning: in the working copy of 'next.config.mjs', LF will be replaced by CRLF the next time Git touches it
// }

model Address {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  users    User     @relation(fields: [userId], references: [id])
  address  String?
  city     String?
  state    String?
  zip      String?
  country  String?
  createAt DateTime @default(now())
}

model Payment {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  userId          String  @db.ObjectId
  users           User    @relation(fields: [userId], references: [id])
  payment         String?
  payment_method  String?
  paymentIntentId String?
  status          String?
  amount          Int?
  orderId         String  @db.ObjectId
  order           Order   @relation(fields: [orderId], references: [id])
}
